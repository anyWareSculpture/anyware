'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Default Configuration
 *
 * Extend the class exported from this module to create your own local
 * configuration objects or use this directly.
 * A configuration file is any ES6 file that exports a single default
 * object containing all of the configuration options.
 *
 * Avoid requiring this file into any file that might need this one.
 * In general game logic should never need this, a config object should
 * be passed around through constructors.
 *
 * Try to keep the structure as flat as possible while grouping things logically
 */

var COLORS = require('../constants/colors');
var GAMES = require('../constants/games');

var DefaultConfig = function () {
  function DefaultConfig() {
    var _USERS, _PANELS;

    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$username = _ref.username;
    var username = _ref$username === undefined ? "" : _ref$username;
    var _ref$user = _ref.user0;
    var user0 = _ref$user === undefined ? "sculpture0" : _ref$user;
    var _ref$user2 = _ref.user1;
    var user1 = _ref$user2 === undefined ? "sculpture1" : _ref$user2;
    var _ref$user3 = _ref.user2;
    var user2 = _ref$user3 === undefined ? "sculpture2" : _ref$user3;

    _classCallCheck(this, DefaultConfig);

    this.user0 = user0;
    this.user1 = user1;
    this.user2 = user2;

    // The username of the current user
    this.username = username || user0;

    // A mapping between usernames and the colors that represent them
    this.COLORS = {
      USERS: (_USERS = {}, _defineProperty(_USERS, this.user0, COLORS.USER0), _defineProperty(_USERS, this.user1, COLORS.USER1), _defineProperty(_USERS, this.user2, COLORS.USER2), _USERS),
      ERROR: 'error'
    };

    // The sequence of the games to be run. The first game is run on startup
    this.GAMES_SEQUENCE = [GAMES.HANDSHAKE, GAMES.MOLE, GAMES.DISK, GAMES.SIMON];

    /******* LIGHTS  ********************/
    this.LIGHTS = {
      // Name : strip Id (corresponds to hardware)
      STRIP_A: '0',
      STRIP_B: '1',
      STRIP_C: '2',
      PERIMETER_STRIP: '3',
      DISK_LIGHT_STRIP: '4',
      HANDSHAKE_STRIP: '5',
      ART_LIGHTS_STRIP: '6'
    };
    this.LIGHTS.GAME_STRIPS = [this.LIGHTS.STRIP_A, this.LIGHTS.STRIP_B, this.LIGHTS.STRIP_C];
    this.PANELS = (_PANELS = {}, _defineProperty(_PANELS, this.LIGHTS.STRIP_A, ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']), _defineProperty(_PANELS, this.LIGHTS.STRIP_B, ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']), _defineProperty(_PANELS, this.LIGHTS.STRIP_C, ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']), _PANELS);

    // These settings effect the default behaviour of panels outside of
    // any custom logic in any of the games
    this.PANEL_DEFAULTS = {
      ACTIVE_INTENSITY: 100,
      INACTIVE_INTENSITY: 0
    };

    /******* GAMES CONFIGURATION *******/

    this.HANDSHAKE_GAME = {
      TRANSITION_OUT_TIME: 4000 // Time (ms) from handshake is touched until we start the next game
    };
    this.MOLE_GAME = {
      GAME_END: 30,
      INITIAL_PANELS: [{ stripId: this.LIGHTS.STRIP_A, panelId: '3' }, { stripId: this.LIGHTS.STRIP_A, panelId: '7' }, { stripId: this.LIGHTS.STRIP_C, panelId: '6' }, { stripId: this.LIGHTS.STRIP_B, panelId: '5' }],
      NUM_ACTIVE_PANELS: {
        10: 1, // At panelCount of 10, increase # of simultaneusly active panels
        20: 1,
        25: -1, // At panelCount of 25, decrease # of simultaneusly active panels
        27: -1
      },
      PANEL_LIFETIME: [{ count: 0, range: [10, 10] }, // Initial timeout
      { count: 4, range: [4, 6] }, // At panelCount of 4, set panel lifetime to 4-6 seconds. Gradually interpolate to next timeout level
      { count: 20, range: [2, 3] }, { count: 30, range: [1.5, 2] }],
      // How long to wait before enabling the next panel, on success
      PANEL_SUCCESS_DELAY: 1000,
      // How long to wait before enabling the next panel, on automatic panel move
      PANEL_MOVE_DELAY: 200,
      // The intensity to use on active panels
      ACTIVE_PANEL_INTENSITY: 100,
      // The intensity to use on inactive panels
      INACTIVE_PANEL_INTENSITY: 0,
      // The intensity to use on ignored panels (panels turned to location color)
      COLORED_PANEL_INTENSITY: 75,
      // We don't use failure sounds in the default setup due to too many accidental touches
      ENABLE_FAILURE_SOUND: false
    };

    this.DISK_GAME = {
      // The user will wins when they reach these positions for each diskId.
      RELATIVE_TOLERANCE: 8, // degrees tolerance for disks relative to each other
      ABSOLUTE_TOLERANCE: 8, // degrees tolerance for the absolute disk positions
      // The intensity of the panels that the user can use to play the sequence
      CONTROL_PANEL_INTENSITY: 20,
      ACTIVE_CONTROL_PANEL_INTENSITY: 100,
      ACTIVE_PERIMETER_INTENSITY: 100,
      INACTIVE_PERIMETER_INTENSITY: 50, // Inactive: when turned to location color
      PERIMETER_COLOR: "white",
      SHADOW_LIGHTS: {
        // stripId: [panelId..]
        '6': ['0', '1', '2']
      },
      SHADOW_LIGHT_INTENSITY: 100,
      LEVELS: [
      // level 0
      // disks: { diskId: target position }
      // perimeter: { stripId: [panelIds..] }
      { disks: { disk2: 206, disk1: 0, disk0: 170 },
        perimeter: _defineProperty({}, this.LIGHTS.PERIMETER_STRIP, ['0', '2'])
      },
      // level 1
      { disks: { disk2: 180, disk1: 305, disk0: 346 },
        perimeter: _defineProperty({}, this.LIGHTS.PERIMETER_STRIP, ['3', '5'])
      },
      // level 2
      { disks: { disk2: 330, disk1: 330, disk0: 242 },
        perimeter: _defineProperty({}, this.LIGHTS.PERIMETER_STRIP, ['1', '4'])
      }],
      LIGHT_MAPPING: {
        // diskId: { stripId: panelId }
        disk0: _defineProperty({}, this.LIGHTS.DISK_LIGHT_STRIP, '0'),
        disk1: _defineProperty({}, this.LIGHTS.DISK_LIGHT_STRIP, '1'),
        disk2: _defineProperty({}, this.LIGHTS.DISK_LIGHT_STRIP, '2')
      },
      CONTROL_MAPPINGS: {
        CLOCKWISE_STRIP: this.LIGHTS.STRIP_C,
        COUNTERCLOCKWISE_STRIP: this.LIGHTS.STRIP_A,

        CLOCKWISE_PANELS: {
          // diskId : [panelId1, ...]
          disk0: ['1'],
          disk1: ['3'],
          disk2: ['5']
        },
        COUNTERCLOCKWISE_PANELS: {
          disk0: ['1'],
          disk1: ['3'],
          disk2: ['5']
        }
      }
    };

    this.SIMON_GAME = {
      PATTERN_LEVELS: [
      // level 0 sequence
      {
        stripId: this.LIGHTS.STRIP_A,
        // Each array of panel IDs is lit up one at a time
        // Each array within this array is called a "frame" in the "sequence"
        panelSequence: [['3'], ['5'], ['7']],
        frameDelay: 750 // Overriding default frame delay to make first level slower
      },
      // level 1 sequence
      {
        stripId: '1',
        panelSequence: [['1'], ['8'], ['5']]
      },
      // level 2 sequence
      {
        stripId: '2',
        panelSequence: [['3'], ['6'], ['2'], ['9']]
      }],
      // The intensity of the panels when they are pressed or when the sequence is playing
      TARGET_PANEL_INTENSITY: 100,
      // The intensity of the panels that the user can use to play the sequence
      AVAILABLE_PANEL_INTENSITY: 1,
      // The delay in ms between sequence frames
      SEQUENCE_ANIMATION_FRAME_DELAY: 500,
      // The delay in ms to wait before replaying the sequence
      // Only replayed if no input is received from the user
      DELAY_BETWEEN_PLAYS: 5000,
      // The time after input to wait for the user to finish the sequence
      INPUT_TIMEOUT: 10000,
      // The default color to set the panels to when
      DEFAULT_SIMON_PANEL_COLOR: "white",
      // Wait while playing final sound
      TRANSITION_OUT_TIME: 10000
    };
  }

  _createClass(DefaultConfig, [{
    key: 'getUserColor',
    value: function getUserColor(username) {
      return this.COLORS.USERS[username];
    }
  }]);

  return DefaultConfig;
}();

exports.default = DefaultConfig;
//# sourceMappingURL=data:application/json;base64,
